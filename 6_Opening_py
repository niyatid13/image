
#opening
from io import BytesIO
import numpy as np       # library used for working with arrays
import matplotlib.pylab as plt  # library used for ploting, graph
import cv2         # library for Open Source Computer vision library
from PIL import Image    # Python Imaging Library for load, display, save etc
from google.colab.patches import cv2_imshow
from google.colab import files
uploaded = files.upload()
#img=Image.open(BytesIO(uploaded['pcb.png']))
img=Image.open(BytesIO(uploaded['pcb.png']))
plt.imshow(img)
#img = cv2.imread("pcb.png")
img = cv2.imread("pcb.png")
img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
#plt.imshow(img,cmap=plt.cm.gray)
# Find size of the input image
m,n= img.shape 
#plt.imshow(img, cmap="gray")
# Define the structuring element
# P= 5, 11,13, 15, 26, 30, 45, 90 -Different sizes of the structuring element
P=5
SE= np.ones((P,P), dtype=np.uint8)
c = (P-1)//2
# Initialize new image for Eroded as imgEr
imgEr = np.zeros((m,n), dtype = np.uint8)
img_opening = np.zeros((m,n), dtype =np.uint8)
for i in range(c, m-c):
  for j in range(c, n-c):
    temp= img[i-c:i+c+1,  j-c:j+c+1]
    product= temp*SE
    imgEr[i,j]= np.min(product)
for i in range(c, m-c):
  for j in range(c, n-c):
    temp= imgEr[i-c:i+c+1,  j-c:j+c+1]
    product= temp*SE
    img_opening[i,j]= np.max(product)

#plt.imshow(img, cmap="gray")

plt.imshow(img_opening, cmap="gray")
